**各々の説明**

参照 [rails tutorial](http://railstutorial.jp/book/ruby-on-rails-tutorial?version=4.0)

* GET  
  最も頻繁に使用されるHTTP操作で、主にWeb上のデータを読み取る際に使われます。

* POST  
  何かを作成するときによく使われます

* PATCH  
  サーバ上の何かを更新するときに使われます

* DELETE  
  サーバ上の何かを削除するときに使われます

**調べたこと**

参照
[Mozilla Developer Network](https://developer.mozilla.org/ja/docs/HTTP#HTTP_request_methods)

* 安全なメソッド  
  安全なメソッド (safe method)とは、サーバ上での副作用がないメソッドです。  
  言い換えると、この特性はメソッドがデータの取り出しにしか用いてはならないことを意味します。  
  HTTP/1.1 で定義されている安全な HTTP メソッドは、GETとHEAD

* 冪等なメソッド(idempotent method)  
  べき等なメソッド (idempotent method)とは、複数の同じリクエストによるサーバ上での副作用と単一のリクエストによる副作用が同じになるメソッドです。

    * 安全なメソッドである HEAD および GET はサーバ上での副作用がないことから、べき等でもあります。

    * PUT は新たなリソースをサーバへアップロードします。異なるリソースがすでにある場合は、それを置き換えます。一方リソースが存在しない場合は、それを新規作成します。

    * DELETE はリソースをサーバから削除します。


 * その他のメソッド  
  POST はサーバ上でアクションを起こします。このメソッドには副作用があり、取引の注文、データベースの変更、フォーラムへのメッセージ投稿などを行うために用いることができます。

参照
[ RFC-Translations related HTTP 日本語訳](http://www.eonet.ne.jp/~h-hash/rfc_ja/rfc2616.ja.html#Sec9
)
* 9.1.1 安全{safe} なメソッド

  実装者は、インターネット上における相互動作においてはソフトウェアがユーザを表しているという事を認識すべきであり、ユーザがそれら自身や他のものに対して予測しない意図を持つようなあらゆる動作に気がつく事ができるように注意すべきである。

  特に、GET と HEAD メソッドはその動作にリソースの回収以上の意味を持つべきではないという慣習が確立されている。 これらのメソッドは、"安全{safe}" だと考えるべきである。 これによって、ユーザエージェントがそれ以外の、例えば POST, PUT, DELETE のようなメソッドを特別な方法で表す事ができるようになり、ユーザにひょっとしたら安全でない動作が要求されているかもしれないという事実を認識させる。

  本質的に、サーバが GET リクエストを実行した結果として副作用を起こさないという事を保証するのは不可能であり、事実、いくつかの動的なリソースはそれが特徴であると考えている。 ここで特に区別すべきなのは、ユーザが副作用を要求しなかったという事であり、それゆえにそれらに対しては責任をもてない。

* 9.1.2 冪等{idempotent} なメソッド

  メソッドは、(エラーや期限切れ発行とは別に) 同一のリクエストの N > 0 の副作用が単一のリクエストにおけるものと同じであるような際には "冪等{idempotence}" の性質を持つ事もできる。


参照 [次期RailsがPATCHメソッドを採用](http://d.hatena.ne.jp/tkawa/20120325/p1)

> updateは冪等？
さて、Railsのupdateアクションは本当に冪等でしょうか？

> それはまあ「実装による」わけですが、多くの場合Railsのモデルではcreated_at, updated_atというタイムスタンプ機能を利用します。この機能では更新日時は自動的に書き込まれます。そして、その日時はGETで取得できたり、リソース内のデータとして普通に使っています。

> ということは、PUTを2回実行したら、日時が違うわけだから違うデータになってしまいます。あれ、冪等じゃないじゃん。困ったね。

> 冪等でない更新はPATCH
そこで、昔に提案されていたHTTPメソッドがPATCHです。

>PATCHは、部分更新のためのメソッドですが、冪等でないと規定されています*1。ちょうどいいね、ということで、次のバージョンのRails 4ではupdateアクションはPATCHメソッドに結びつくようになりました。

**まとめ**

* 安全なメソッドと冪等なメソッドが存在する

* 例えば、GETとHEADはサーバ上のリソースを取得するという以外の意味を持たない。サーバ上のリソースに変更がない（副作用がない）ので、安全である

* 冪等なメソッドは、複数のリクエストと単一のリクエストで、操作の結果が同じ

* GETとHEADは冪等で安全

* PUTとDELETEは冪等だが安全ではない

* PATCHとPOSTは冪等でも安全でもない
